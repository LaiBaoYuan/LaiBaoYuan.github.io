import{_ as s,c as a,o as n,d as l}from"./app.a67d7360.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"notes/frontend/Rollup/Rollup简介.md","lastUpdated":1678115149000}'),p={name:"notes/frontend/Rollup/Rollup简介.md"},o=l(`<figure><img src="https://aliyun.workdomain.cloud/github/image-20230305112955689.png" alt=""></figure><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-hidden="true">#</a></h2><p>Rollup 是一个 JavaScript 模块打包工具，可以将多个小的代码片段编译为完整的库和应用。与传统的 CommonJS 和 AMD 这一类非标准化的解决方案不同，Rollup 使用的是 ES6 版本 Javascript 中的模块标准。新的 ES 模块可以让你自由、无缝地按需使用你最喜爱的库中那些有用的单个函数。这一特性在未来将随处可用，但 Rollup 让你现在就可以，想用就用。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--global</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">rollup</span></span>
<span class="line"></span></code></pre></div><h2 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-hidden="true">#</a></h2><p>Rollup 可以通过两种方式使用：使用命令行方式，可以为命令行传入一个可选的配置文件。或者使用 JavaScript API 方式。运行 <code>rollup --help</code> 可以查看可用的选项和参数。</p><p>以下命令假设你以 <code>main.js</code> 文件作为应用的入口点，并将所有的引入编译为单文件 <code>bundle.js</code>。</p><p>用于浏览器：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 编译为一个在 &lt;script&gt; 标签中可用的自运行函数 (&#39;iife&#39;)</span></span>
<span class="line"><span style="color:#F8F8F2;">rollup </span><span style="color:#F1FA8C;">main.js</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--file</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">bundle.js</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--format</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">iife</span></span>
<span class="line"></span></code></pre></div><p>用于 Node.js：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 编译为 CommonJS 模块 (&#39;cjs&#39;)</span></span>
<span class="line"><span style="color:#F8F8F2;">rollup </span><span style="color:#F1FA8C;">main.js</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--file</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">bundle.js</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--format</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">cjs</span></span>
<span class="line"></span></code></pre></div><p>同时用于浏览器和 Node.js：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 需要为 UMD 格式的包指定一个名称</span></span>
<span class="line"><span style="color:#F8F8F2;">rollup </span><span style="color:#F1FA8C;">main.js</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--file</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">bundle.js</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--format</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">umd</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--name</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">myBundle</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="tree-shaking" tabindex="-1">Tree-Shaking <a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a></h2><p>除了能够让你使用标准的 ES 模块，Rollup 还可以对所用的代码进行静态分析，<strong>并将未实际用到的代码剔除</strong>。这一特性将允许你放心的使用已有的工具和模块来创建应用而无需担心存在冗余的依赖和代码。</p><p>比如，使用 CommonJS 的时候，工具或库必须被整体导入：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 在 CommonJS 中，utils 对象将被整体导入</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> utils </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">( </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./utils</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> );</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> query </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Rollup</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">// 使用 utils 对象的 ajax 方法</span></span>
<span class="line"><span style="color:#F8F8F2;">utils.</span><span style="color:#50FA7B;">ajax</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`https://api.example.com?search=</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">query</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(handleResponse);</span></span>
<span class="line"></span></code></pre></div><p>与上述例子中只能导入整个 <code>utils</code> 对象不同，ES 模块可以让我们仅导入所需的 <code>ajax</code> 函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 通过 ES6 的 import 语句导入 ajax 函数</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { ajax } </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./utils</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> query </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Rollup</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">// 调用 ajax 函数</span></span>
<span class="line"><span style="color:#50FA7B;">ajax</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`https://api.example.com?search=</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">query</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(handleResponse);</span></span>
<span class="line"></span></code></pre></div><p>由于只保留最精简的所需代码，通过 Rollup 生成的库和应用就可以更加轻量、快速、清晰。由于 import 和 export 语句的使用都是明确的，就决定了这一方式要比那种简单的通过代码压缩工具查找未使用变量的方案更有效。</p>`,21),e=[o];function c(t,F,r,y,i,d){return n(),a("div",null,e)}const C=s(p,[["render",c]]);export{h as __pageData,C as default};
